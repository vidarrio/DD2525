import React, { useState, useContext, useRef } from 'react';
import * as wasm from "wasm-security-test";
import WasmErrorDisplay from '../../../Utils/WasmErrorDisplay';
import { WasmErrorContext } from '../../../../App';
import CodeViewer from '../../../Utils/CodeViewer';
import { 
  ImplementationContainer, 
  InputField, 
  RunButton, 
  ResultDisplay, 
  SecurityMessage,
  OutputPanel 
} from '../../../Shared';

const JavascriptCodeInjection: React.FC = () => {
  const [userCode, setUserCode] = useState<string>('alert("XSS Attack!")');
  const [output, setOutput] = useState<string>('');
  const [outputType, setOutputType] = useState<'safe' | 'unsafe' | null>(null);
  const [executedUnsafe, setExecutedUnsafe] = useState<boolean>(false);
  const [executedSafe, setExecutedSafe] = useState<boolean>(false);
  const unsafeExecutionRef = useRef<HTMLDivElement>(null);
  const safeExecutionRef = useRef<HTMLDivElement>(null);
  const { clearErrors } = useContext(WasmErrorContext);

  const runVulnerableVersion = () => {
    try {
      clearErrors();
      const result = wasm.vulnerable_generate_javascript('userFunction', userCode);
      setOutput(result);
      setOutputType('unsafe');
      setExecutedUnsafe(true);
      
      // Show confirmation dialog for live execution
      const shouldExecute = window.confirm(`‚ö†Ô∏è DEMO: About to execute JavaScript code generated by WASM: ${userCode}\n\nThis is for educational purposes. Continue?`);
      
      // Use setTimeout to ensure the DOM has updated and the ref is available
      setTimeout(() => {
        if (unsafeExecutionRef.current) {
          if (shouldExecute) {
            try {
              // Execute the user code in a controlled demonstration environment
              const func = new Function(userCode);
              func();
              
              // Add execution confirmation to the demo area
              unsafeExecutionRef.current.innerHTML = `
                <div style="color: #dc3545; font-weight: bold; margin-bottom: 10px;">
                  ‚ö° Code Executed Successfully!
                </div>
                <div style="font-family: monospace; padding: 10px; border-radius: 4px; border-left: 4px solid #dc3545;">
                  ${userCode}
                </div>
                <div style="margin-top: 10px; font-size: 14px; color: #666;">
                  In a real application, this would execute with full browser privileges.
                </div>
              `;
            } catch (execError) {
              // Show execution error in the demo area
              if (unsafeExecutionRef.current) {
                const errorMessage = execError instanceof Error ? execError.message : String(execError);
                unsafeExecutionRef.current.innerHTML = `
                  <div style="color: #dc3545; font-weight: bold; margin-bottom: 10px;">
                    ‚ùå Code Execution Failed
                  </div>
                  <div style="font-family: monospace; background: #fff5f5; padding: 10px; border-radius: 4px; border: 1px solid #dc3545;">
                    Error: ${errorMessage}
                  </div>
                  <div style="margin-top: 10px; font-size: 14px; color: #666;">
                    The code generated by WASM contained syntax errors or was blocked by browser security.
                  </div>
                `;
              }
              console.error("Code execution failed:", execError);
            }
          } else {
            // User cancelled execution
            unsafeExecutionRef.current.innerHTML = `
              <div style="color: #666; font-style: italic;">
                Code execution cancelled by user
              </div>
            `;
          }
        }
      }, 100);
    } catch (error) {
      console.error("Error running vulnerable version:", error);
    }
  };

  const runSecureVersion = () => {
    try {
      clearErrors();
      const result = wasm.secure_generate_javascript('userFunction', userCode);
      setOutput(result);
      setOutputType('safe');
      setExecutedSafe(true);
      
      // Try to execute the "safe" content to demonstrate security measures work
      const shouldExecute = window.confirm(`üõ°Ô∏è SAFE DEMO: About to attempt execution of WASM-validated code: ${userCode}\n\nThis should be safe - the WASM module will validate the code. Continue?`);
      
      if (shouldExecute) {
        // Use setTimeout to ensure the DOM has updated and the ref is available
        setTimeout(() => {
          if (safeExecutionRef.current) {
            if (result.startsWith("SAFE:")) {
              // WASM approved the code - attempt execution
              try {
                const jsCode = result.replace("SAFE: Generated function: ", "");
                const func = new Function(jsCode);
                func();
                
                safeExecutionRef.current.innerHTML = `
                  <div style="color: #28a745; font-weight: bold; margin-bottom: 10px;">
                    ‚úÖ Safe Code Executed Successfully!
                  </div>
                  <div style="font-family: monospace; background: #f8f9fa; padding: 10px; border-radius: 4px; border-left: 4px solid #28a745;">
                    ${userCode}
                  </div>
                  <div style="margin-top: 10px; font-size: 14px; color: #666;">
                    WASM validated this code as safe before allowing execution.
                  </div>
                `;
              } catch (execError) {
                const errorMessage = execError instanceof Error ? execError.message : String(execError);
                if (safeExecutionRef.current) {
                  safeExecutionRef.current.innerHTML = `
                    <div style="color: #dc3545; font-weight: bold; margin-bottom: 10px;">
                      ‚ùå Safe Code Execution Failed
                    </div>
                    <div style="font-family: monospace; background: #fff5f5; padding: 10px; border-radius: 4px; border: 1px solid #dc3545;">
                      Error: ${errorMessage}
                    </div>
                    <div style="margin-top: 10px; font-size: 14px; color: #666;">
                      Even though WASM approved this code, it failed to execute due to runtime errors.
                    </div>
                  `;
                }
              }
            } else {
              // WASM blocked the code
              safeExecutionRef.current.innerHTML = `
                <div style="color: #ffc107; font-weight: bold; margin-bottom: 10px;">
                  üõ°Ô∏è Code Blocked by WASM Security
                </div>
                <div style="font-family: monospace; background: #fff8e1; padding: 10px; border-radius: 4px; border-left: 4px solid #ffc107;">
                  Original Input: ${userCode}
                </div>
                <div style="margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 4px; border: 1px solid #dee2e6;">
                  <strong>WASM Security Response:</strong><br/>
                  ${result}
                </div>
                <div style="margin-top: 10px; font-size: 14px; color: #666;">
                  The WASM module detected dangerous patterns and prevented code generation.
                </div>
              `;
            }
          }
        }, 100);
      } else {
        // User cancelled
        setTimeout(() => {
          if (safeExecutionRef.current) {
            safeExecutionRef.current.innerHTML = `
              <div style="color: #666; font-style: italic;">
                Safe execution cancelled by user
              </div>
            `;
          }
        }, 100);
      }
    } catch (error) {
      console.error("Error running secure version:", error);
    }
  };

  const loadExample = (code: string) => {
    setUserCode(code);
    setOutput('');
    setOutputType(null);
    setExecutedUnsafe(false);
    setExecutedSafe(false);
    
    // Clear execution demo areas
    if (unsafeExecutionRef.current) {
      unsafeExecutionRef.current.innerHTML = '';
    }
    if (safeExecutionRef.current) {
      safeExecutionRef.current.innerHTML = '';
    }
  };

  const examples = [
    { code: 'alert("XSS Attack!")', description: 'Basic Alert Popup' },
    { code: 'document.location="https://attacker-site.test"', description: 'Page Redirect' },
    { code: 'console.log("Simulated data exfiltration:", document.cookie); alert("Data would be sent to attacker-site.test")', description: 'Data Exfiltration (Simulated)' },
    { code: 'document.body.innerHTML="<h1>Site Defaced!</h1>"', description: 'DOM Manipulation' },
    { code: 'console.log("Cookie theft attempt:", document.cookie); alert("Cookies would be sent to attacker-site.test")', description: 'Cookie Theft (Simulated)' },
    { code: 'console.log("Safe logging")', description: 'Safe Console Log' }
  ];

  const unsafeCode = `// VULNERABLE: Direct JavaScript code generation
// Rust (WASM side):
#[wasm_bindgen]
pub fn vulnerable_generate_javascript(user_function_name: &str, user_code: &str) -> String {
    // VULNERABILITY: Direct code injection without validation
    let javascript = format!(
        r#"function {}() {{
            console.log("User function executing...");
            {};
            return "Function executed successfully";
        }}"#, 
        user_function_name, user_code  // Direct injection!
    );
    
    format!("Generated JavaScript: {}", javascript)
}

// TypeScript (Frontend side):
import * as wasm from "wasm-security-test";

const executeUserCode = () => {
    const userInput = 'alert("XSS Attack!")';
    const jsCode = wasm.vulnerable_generate_javascript("userFunc", userInput);
    
    // DANGER: Execute WASM-generated JavaScript code
    const func = new Function(jsCode);
    func(); // ‚Üë This executes the malicious code!
};`;

  const secureCode = `// SECURE: Safe code validation and controlled execution
// Rust (WASM side):
#[wasm_bindgen]
pub fn secure_generate_javascript(user_function_name: &str, user_code: &str) -> String {
    // Validate function name (alphanumeric only)
    if !user_function_name.chars().all(|c| c.is_alphanumeric()) {
        return "Error: Function name must be alphanumeric only".to_string();
    }
    
    // Whitelist allowed operations for the user code
    let allowed_operations = [
        "return ", "console.log(", "Math.", "parseInt(", "parseFloat(",
        "typeof ", "length", "+", "-", "*", "/", "(", ")", " ", ";"
    ];
    
    // Check if user code contains only allowed operations
    let safe_code = if allowed_operations.iter().any(|&op| user_code.contains(op)) 
        && !user_code.contains("alert")
        && !user_code.contains("document")
        && !user_code.contains("window")
        && !user_code.contains("eval") {
        user_code.to_string()
    } else {
        "console.log('Code blocked for security')".to_string()
    };
    
    let javascript = format!(
        r#"function {}() {{
            console.log("Safe user function executing...");
            {};
            return "Function executed safely";
        }}"#, 
        user_function_name, safe_code
    );
    
    format!("Generated safe JavaScript: {}", javascript)
}

// TypeScript (Frontend side):
import * as wasm from "wasm-security-test";

const executeSecureCode = () => {
    const userInput = 'console.log("Safe operation")';
    const result = wasm.secure_generate_javascript("userFunc", userInput);
    
    // SAFE: WASM validates before generating any code
    if (result.startsWith("Generated safe JavaScript:")) {
        // Only execute if WASM approved the code
        const jsCode = result.replace("Generated safe JavaScript: ", "");
        const func = new Function(jsCode);
        func(); // ‚Üë Only safe, validated code executes
    } else {
        console.log("Code blocked by WASM security:", result);
    }
};`;

  return (
    <div className="exploit-container">
      <h3>JavaScript Code Generation from WASM</h3>
      <p className="description">
        <strong>Explanation:</strong> WASM modules frequently need to bridge to JavaScript for DOM manipulation, API calls, and dynamic behavior. 
        This bridge often involves WASM generating JavaScript code strings that are then executed in the browser context.
        When user-controlled data flows through WASM processing into JavaScript generation, code injection vulnerabilities emerge.
      </p>

      <p>
        <strong>Scenario:</strong> A web application uses WASM to dynamically generate JavaScript functions 
        based on user input for customizable scripting capabilities. This could be part of a code editor, 
        automation tool, or interactive scripting environment where users provide code snippets that get 
        wrapped into proper JavaScript functions by the WASM module. The WASM processes the user input 
        and generates executable JavaScript code that gets executed in the browser context.
      </p>

      <div className="wasm-scenarios">
        <h4>üîó WASM-JavaScript Bridge Vulnerabilities</h4>
        <div className="bridge-explanation">
          <p>
            <strong>The Attack Vector:</strong> WASM modules receive user input, process it, and generate JavaScript code 
            for execution. This pattern is coulbe be used in applications that need dynamic scripting capabilities or complex 
            DOM interactions that can't be handled directly from WASM.
          </p>
        </div>
      </div>

      <CodeViewer 
        unsafeCode={unsafeCode}
        safeCode={secureCode}
        title="JavaScript Code Generation Implementation Comparison"
      />

      <div className="exploit-implementations">
        <div className="realistic-interface">
          <div className="app-mockup">
            <div className="app-header">
              <h3>JavaScript Code Generator Demo</h3>
            </div>
            
            <div className="ide-content">
              <div className="main-editor">
                <div className="code-generation-panel">
                  <div className="input-section">
                    <div className="input-header">
                      <h4>Code Input</h4>
                    </div>
                    
                    <div className="code-input-area">
                      <label>JavaScript Code Fragment</label>
                      <textarea
                        value={userCode}
                        onChange={(e) => setUserCode(e.target.value)}
                        placeholder="Enter JavaScript code to be processed by WASM generator..."
                        rows={5}
                        className="code-textarea"
                      />
                    </div>

                    <div className="generation-controls">
                      <RunButton 
                        type="unsafe"
                        onClick={runVulnerableVersion}
                        className="btn btn-primary vulnerable"
                      >
                        üöÄ Generate Code (Vulnerable)
                      </RunButton>
                      
                      <RunButton 
                        type="safe"
                        onClick={runSecureVersion}
                        className="btn btn-primary secure"
                      >
                        üõ°Ô∏è Generate Code (Secure)
                      </RunButton>
                    </div>
                  </div>

                  <div className="payload-testing-section">
                    <div className="section-header">
                      <h4>Example Payloads</h4>
                      <p>Click any payload card below to load it into the code editor</p>
                    </div>
                    
                    <div className="payload-grid">
                      {examples.map((example, index) => (
                        <div
                          key={index}
                          className="payload-card"
                          onClick={() => loadExample(example.code)}
                          title="Click to load this payload"
                        >
                          <div className="payload-code">
                            {example.description}
                          </div>
                        </div>
                      ))}
                    </div>
                    
                    <div className="payload-hint">
                      <small>‚Üë Click any card to load the example</small>
                    </div>
                  </div>
                </div>

                {output && (
                  <div className="output-section">
                    <OutputPanel 
                      title="Generated Output"
                      type={outputType === 'safe' ? 'success' : outputType === 'unsafe' ? 'error' : 'default'}
                    >
                      <pre className="output-code">{output}</pre>
                    </OutputPanel>

                    {/* Live execution demonstration for unsafe version */}
                    {outputType === 'unsafe' && executedUnsafe && (
                      <div className="live-execution-demo">
                        <div className="demo-header">
                          <h5>üö® Live Code Execution Demo</h5>
                          <p>The JavaScript code generated by WASM is being executed:</p>
                        </div>
                        <div 
                          ref={unsafeExecutionRef} 
                          className="unsafe-code-execution"
                          style={{
                            border: '2px solid #dc3545',
                            padding: '15px',
                            borderRadius: '6px',
                            minHeight: '50px'
                          }}
                        />
                      </div>
                    )}

                    {/* Live execution demonstration for safe version */}
                    {outputType === 'safe' && executedSafe && (
                      <div className="live-execution-demo">
                        <div className="demo-header">
                          <h5>üõ°Ô∏è Safe Execution Demo</h5>
                          <p>Attempting to execute WASM-validated code:</p>
                        </div>
                        <div 
                          ref={safeExecutionRef} 
                          className="safe-code-execution"
                          style={{
                            border: '2px solid #28a745',
                            padding: '15px',
                            borderRadius: '6px',
                            backgroundColor: '#f8fff8',
                            minHeight: '50px'
                          }}
                        />
                      </div>
                    )}

                    {outputType && (
                      <SecurityMessage
                        type={outputType === 'unsafe' ? 'warning' : 'success'}
                        title={outputType === 'unsafe' ? 'Vulnerable Code Generated' : 'Secure Code Generation'}
                      >
                        {outputType === 'unsafe' ? (
                          <>
                            <p>
                              The vulnerable WASM module generated executable JavaScript without validation. 
                              This allows attackers to inject arbitrary code that executes with full browser privileges.
                            </p>
                            {executedUnsafe && (
                              <p className="execution-note">
                                <strong>‚ö° Live Demo:</strong> The generated code was actually executed above!
                              </p>
                            )}
                          </>
                        ) : (
                          <>
                            <p>
                              The secure WASM module validated the input against dangerous patterns and 
                              blocked potential code injection attempts. Only safe operations are permitted.
                            </p>
                            {executedSafe && (
                              <p className="execution-note">
                                <strong>üõ°Ô∏è Security Demo:</strong> Attempted execution was safely controlled above!
                              </p>
                            )}
                          </>
                        )}
                      </SecurityMessage>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <WasmErrorDisplay />
    </div>
  );
};

export default JavascriptCodeInjection;