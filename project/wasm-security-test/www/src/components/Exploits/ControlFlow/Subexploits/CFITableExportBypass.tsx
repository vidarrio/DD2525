import React, { useState } from 'react';
import * as wasm from 'wasm-security-test';
import CodeViewer from '../../../Utils/CodeViewer';
import WasmErrorDisplay from '../../../Utils/WasmErrorDisplay';
import { RunButton, SecurityMessage, ResultDisplay, OutputPanel } from '../../../Shared';
import '../../../../styles/control-flow/function-table.css';

const CFITableExportBypass: React.FC = () => {
  const [result, setResult] = useState<number | null>(null);
  const [tableState, setTableState] = useState<(string)[]>(['safe_function', 'safe_function']);
  const [error, setError] = useState<string | null>(null);
  const [activeSlot, setActiveSlot] = useState<number | null>(null);

  // Instead of using the raw WASM table, we'll simulate it with our own functions
  // that have the same behavior as the WASM functions
  const [table, setTable] = useState<any[]>([
    () => 42,  // safe_function returns 42
    () => 42   // initially both slots point to safe_function
  ]);

  const overwriteSlot = (idx: number, fn: 'safe' | 'secret') => {
    const newTable = [...table];
    // Set the function to either safe (returns 42) or secret (returns 1337)
    newTable[idx] = fn === 'safe' ? () => 42 : () => 1337;
    setTable(newTable);
    setTableState([
      idx === 0 ? (fn === 'safe' ? 'safe_function' : 'secret_function') : tableState[0],
      idx === 1 ? (fn === 'safe' ? 'safe_function' : 'secret_function') : tableState[1]
    ]);
  };

  const callIndirect = (idx: number) => {
    setError(null);
    setActiveSlot(idx);
    let value = -1;
    try {
      // Mimic WASM indirect call using the table
      value = table[idx]();
    } catch (e: any) {
      setError(e.message || 'Error');
      value = -1;
    }
    setResult(value);
    
    // Reset active slot after animation
    setTimeout(() => {
      setActiveSlot(null);
    }, 1000);
  };

  return (
    <div className="exploit-container">
      <h3>Exported WASM Table Modification: CFI Bypass</h3>
      <div className="exploit-explanation">
        <p>
          <strong>WebAssembly Function Table Manipulation: CFI Bypass Attack</strong>
        </p>
        <p>
          WebAssembly's CFI protects indirect calls by ensuring type safety and using function 
          tables. However, when the function table itself is exported to JavaScript, the host 
          can directly manipulate the table contents, effectively bypassing CFI protections 
          from within the WASM execution context.
        </p>
        <p>
          <strong>The Vulnerability:</strong> If a WASM module exports its function table, 
          JavaScript code can overwrite table entries to redirect indirect calls to different 
          functions. This breaks the integrity of <code>call_indirect</code> operations and 
          allows attackers to control WASM's internal control flow.
        </p>
        <p>
          <strong>Real-world Impact:</strong> Attackers can hijack function pointers used in 
          callbacks, event handlers, or virtual function tables, redirecting execution to 
          sensitive functions or causing undefined behavior. This is particularly dangerous 
          in applications using function tables for plugin systems or dynamic dispatch.
        </p>
        <p>
          <strong>CFI Bypass Mechanism:</strong> While WASM's CFI validates that table entries 
          point to valid functions of the correct type, it cannot prevent the host from 
          changing which valid function a table slot points to.
        </p>
      </div>
      
      <div className="exploit-controls">
        <div className="wasm-table-container">
          <h4>WebAssembly Function Table</h4>
          <div className="table-wrapper">
            <table className="wasm-function-table">
              <thead>
                <tr>
                  <th className="table-col-index">Index</th>
                  <th className="table-col-function">Function</th>
                  <th className="table-col-actions">Actions</th>
                </tr>
              </thead>
              <tbody>
                <tr className={activeSlot === 0 ? 'active-slot' : ''}>
                  <td className="table-cell-index">{0}</td>
                  <td className="table-cell-function">
                    <div className={`function-name ${tableState[0] === 'secret_function' ? 'secret-function' : 'safe-function'}`}>
                      {tableState[0]}
                    </div>
                  </td>
                  <td className="table-cell-actions">
                    <div className="button-group">
                      <RunButton 
                        type="safe"
                        onClick={() => overwriteSlot(0, 'safe')}
                        className="action-button"
                      >
                        Set Safe
                      </RunButton>
                      <RunButton 
                        type="unsafe"
                        onClick={() => overwriteSlot(0, 'secret')}
                        className="action-button"
                      >
                        Set Secret
                      </RunButton>
                    </div>
                  </td>
                </tr>
                <tr className={activeSlot === 1 ? 'active-slot' : ''}>
                  <td className="table-cell-index">{1}</td>
                  <td className="table-cell-function">
                    <div className={`function-name ${tableState[1] === 'secret_function' ? 'secret-function' : 'safe-function'}`}>
                      {tableState[1]}
                    </div>
                  </td>
                  <td className="table-cell-actions">
                    <div className="button-group">
                      <RunButton 
                        type="safe"
                        onClick={() => overwriteSlot(1, 'safe')}
                        className="action-button"
                      >
                        Set Safe
                      </RunButton>
                      <RunButton 
                        type="unsafe"
                        onClick={() => overwriteSlot(1, 'secret')}
                        className="action-button"
                      >
                        Set Secret
                      </RunButton>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
          
          <div className="table-visualization-explanation">
            <p>
              <strong>Table Visualization:</strong> This represents the WebAssembly function table that stores references
              to functions for indirect calls. Normally, this table cannot be modified from JavaScript.
              When the table is exported though, any JS code can modify it, bypassing intended access restrictions.
            </p>
          </div>
        </div>
        
        <div className="indirect-call-simulator">
          <h4>Indirect Call Simulation</h4>
          <p>
            Click a button to simulate a WASM <code>call_indirect</code> instruction with the given index.
            This simulates what happens when WASM code executes: <code>call_indirect $type $index</code>
          </p>
          <div className="control-row">
            <RunButton 
              type="primary"
              onClick={() => callIndirect(0)}
            >
              Call Indirect (index 0)
            </RunButton>
            <RunButton 
              type="primary"
              onClick={() => callIndirect(1)}
            >
              Call Indirect (index 1)
            </RunButton>
          </div>
        </div>
      </div>
      
      <OutputPanel title="Result">
        {error && <ResultDisplay type="error" result={error} />}
        {result !== null ? (
          <div className="result-info">
            <div><strong>Table index called:</strong> {activeSlot !== null ? activeSlot : ''}</div>
            <div><strong>Function executed:</strong> {activeSlot !== null ? tableState[activeSlot] : ''}</div>
            <div><strong>Return value:</strong> {result}</div>
            
            {result === 1337 && (
              <SecurityMessage type="warning" title="Security Issue">
                Secret function was called via indirect call after table modification!<br/>
                This demonstrates how host code can bypass WASM's CFI by modifying the exported table.
              </SecurityMessage>
            )}
            
            {result === 42 && (
              <SecurityMessage type="success" title="Safe Call">
                The safe function was called via the indirect call.
              </SecurityMessage>
            )}
          </div>
        ) : (
          <ResultDisplay type="neutral" result="No call made yet." />
        )}
      </OutputPanel>
      <WasmErrorDisplay />
    </div>
  );
};

export default CFITableExportBypass;