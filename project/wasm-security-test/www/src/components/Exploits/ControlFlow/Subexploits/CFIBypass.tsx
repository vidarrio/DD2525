import React, { useState } from 'react';
import * as wasm from 'wasm-security-test';
import CodeViewer from '../../../Utils/CodeViewer';
import WasmErrorDisplay from '../../../Utils/WasmErrorDisplay';
import { RunButton, SecurityMessage } from '../../../Shared';
import '../../../../styles/control-flow/wasm-module.css';
import '../../../../styles/control-flow/implementation-selector.css';
import '../../../../styles/control-flow/implementation-buttons.css';

const functionTable = [
  { name: 'safe_function', label: 'Safe Function', call: () => wasm.safe_function() },
  { name: 'secret_function', label: 'Secret Function (should be protected)', call: () => wasm.secret_function() },
];

const unsafeCode = `// Unsafe: WASM module exports sensitive function
// Rust (wasm-bindgen):
#[wasm_bindgen]
pub fn safe_function() -> i32 { 42 }
#[wasm_bindgen]
pub fn secret_function() -> i32 { 1337 } // Should NOT be exported!

// JS/TS:
import * as wasm from 'wasm-security-test';
wasm.safe_function();      // Safe
wasm.secret_function();    // Sensitive, should NOT be accessible
`;

const safeCode = `// Safe: WASM module does NOT export secret function
// Rust (wasm-bindgen):
#[wasm_bindgen]
pub fn safe_function() -> i32 { 42 }
// secret_function is NOT exported!
fn secret_function() -> i32 { 1337 }

// JS/TS:
import * as wasm from 'wasm-security-test';
wasm.safe_function();      // Safe
// wasm.secret_function is undefined and cannot be called
`;

const CFIBypass: React.FC = () => {
  const [result, setResult] = useState<number | null>(null);
  const [called, setCalled] = useState<string | null>(null);
  const [mode, setMode] = useState<'unsafe' | 'safe'>('unsafe');
  const [isAnimating, setIsAnimating] = useState(false);

  const runDemo = (fn: () => number, fnName: string) => {
    setIsAnimating(true);
    setCalled(fnName);
    
    let value = -1;
    try {
      value = fn();
    } catch (e) {
      value = -1;
    }
    
    setResult(value);
    
    // Reset animation after delay
    setTimeout(() => {
      setIsAnimating(false);
    }, 1000);
  };

  return (
    <div className="exploit-container">
      <h3>Host/WASM Export Exposure: CFI Risk for WebAssembly Users</h3>
      <div className="exploit-explanation">
        <p>
          <strong>WebAssembly Control Flow Integrity: Host Exposure Boundaries</strong>
        </p>
        <p>
          WebAssembly's Control Flow Integrity (CFI) provides strong protection for 
           <em>internal</em> function calls through type checking and controlled indirect calls. 
          However, CFI cannot protect against what the module itself chooses to expose to the host.
        </p>
        <p>
          <strong>The Vulnerability:</strong> When WASM modules export sensitive functions 
          through <code>#[wasm_bindgen]</code>, any JavaScript code can call them directly. 
          This bypasses the module's intended interface and breaks the security boundary 
          between WASM and the host environment.
        </p>
        <p>
          <strong>Real-world Impact:</strong> Attackers with JavaScript execution capability 
          (XSS, console access, malicious scripts) can call any exported WASM function, 
          potentially accessing privileged operations, sensitive data, or bypassing 
          application security controls.
        </p>
        <p>
          <strong>CFI Limitation:</strong> WASM's CFI cannot distinguish between "intended" 
          and "unintended" direct calls from the host - it only protects internal control flow.
        </p>
      </div>
      
      <div className="exploit-controls">
        <p className="implementation-label">Select an implementation to test:</p>
        <div className="control-row">
          <RunButton 
            type={mode === 'unsafe' ? 'unsafe' : 'secondary'}
            onClick={() => setMode('unsafe')}
            className={mode === 'unsafe' ? 'active' : ''}
          >
            {mode === 'unsafe' ? 'Using Unsafe Version' : 'Use Unsafe Version'}
          </RunButton>
          
          <RunButton 
            type={mode === 'safe' ? 'safe' : 'secondary'}
            onClick={() => setMode('safe')}
            className={mode === 'safe' ? 'active' : ''}
          >
            {mode === 'safe' ? 'Using Safe Version' : 'Use Safe Version'}
          </RunButton>
        </div>
        
        <div className="wasm-module-visualization">
          <h4>WASM Module Structure</h4>
          <div className={`module-diagram ${isAnimating ? 'animating' : ''}`}>
            {/* JavaScript Environment */}
            <div className="js-environment">
              <div className="environment-label">JavaScript Environment</div>
              <div className="js-code">
                <div className="code-line">
                  <span className="code-keyword">const</span> wasm = <span className="code-api">importModule</span>(<span className="code-string">'wasm-module'</span>);
                </div>
                <div 
                  className={`code-line ${called === 'safe_function' ? 'active-call' : ''}`}
                  onClick={() => runDemo(wasm.safe_function, 'safe_function')}
                >
                  wasm.<span className="code-function">safe_function</span>();
                  <span className="code-comment">// Always accessible</span>
                </div>
                {mode === 'unsafe' && (
                  <div 
                    className={`code-line ${called === 'secret_function' ? 'active-call' : ''}`}
                    onClick={() => runDemo(wasm.secret_function, 'secret_function')}
                  >
                    wasm.<span className="code-function secret-function">secret_function</span>();
                    <span className="code-comment">// Should be protected!</span>
                  </div>
                )}
                {mode === 'safe' && (
                  <div className="code-line inactive">
                    wasm.<span className="code-function">secret_function</span>();
                    <span className="code-comment">// Undefined - not exported</span>
                  </div>
                )}
              </div>
            </div>
            
            {/* WASM Module */}
            <div className="wasm-module">
              <div className="module-label">WebAssembly Module</div>
              <div className="module-functions">
                <div className={`module-function ${called === 'safe_function' ? 'called-function' : ''}`}>
                  <span className="function-export">export</span>
                  <span className="function-name">safe_function</span>
                  <span className="function-return">→ 42</span>
                </div>
                {mode === 'unsafe' ? (
                  <div className={`module-function ${called === 'secret_function' ? 'called-function' : ''}`}>
                    <span className="function-export">export</span>
                    <span className="function-name secret-function">secret_function</span>
                    <span className="function-return">→ 1337</span>
                  </div>
                ) : (
                  <div className="module-function non-exported">
                    <span className="function-local">local only</span>
                    <span className="function-name secret-function">secret_function</span>
                    <span className="function-return">→ 1337</span>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div className="function-call-buttons">
            <RunButton 
              type="safe"
              onClick={() => runDemo(wasm.safe_function, 'safe_function')}
              disabled={isAnimating}
              className="safe-function-button"
            >
              Call Safe Function
            </RunButton>
            {mode === 'unsafe' && (
              <RunButton 
                type="unsafe"
                onClick={() => runDemo(wasm.secret_function, 'secret_function')}
                disabled={isAnimating}
                className="secret-function-button"
              >
                Call Secret Function
              </RunButton>
            )}
          </div>
        </div>
      </div>
      
      <div className="output-panel">
        <h4>Result</h4>
        {result !== null ? (
          <div className="result-info">
            <div><strong>Function called:</strong> {called}</div>
            <div><strong>Return value:</strong> {result}</div>
            {mode === 'unsafe' && called === 'secret_function' && result === 1337 && (
              <SecurityMessage type="warning" title="CFI Boundary Exceeded">
                <strong>Security Breach:</strong> The secret function was called directly from JavaScript!
                <br/><br/>
                <strong>Impact:</strong> This demonstrates that WASM's CFI cannot protect against 
                host-initiated calls to exported functions. Any malicious script with access to 
                the WASM module can call sensitive functions directly.
                <br/><br/>
                <strong>Attack Vector:</strong> JavaScript console, XSS payloads, or malicious 
                third-party scripts could invoke this function to access sensitive functionality.
              </SecurityMessage>
            )}
            {mode === 'safe' && (
              <SecurityMessage type="success" title="CFI Protection Active">
                <strong>Secure Design:</strong> The secret function is not exported, making it 
                inaccessible to JavaScript code.
                <br/><br/>
                <strong>Protection:</strong> By keeping sensitive functions internal to the WASM 
                module, we maintain proper security boundaries and prevent unauthorized access.
              </SecurityMessage>
            )}
          </div>
        ) : <span className="no-result">No call made yet.</span>}
      </div>
      
      <CodeViewer unsafeCode={unsafeCode} safeCode={safeCode} title="Host Exposure (WASM Export vs. No Export)" />
      <WasmErrorDisplay />
    </div>
  );
};

export default CFIBypass;