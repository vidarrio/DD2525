import React, { useState } from 'react';
import * as wasm from 'wasm-security-test';
import CodeViewer from '../../../Utils/CodeViewer';
import WasmErrorDisplay from '../../../Utils/WasmErrorDisplay';
import { RunButton, SecurityMessage, ResultDisplay, OutputPanel } from '../../../Shared';
import '../../../../styles/control-flow/function-table.css';
import '../../../../styles/control-flow/implementation-selector.css';
import '../../../../styles/control-flow/implementation-buttons.css';

const unsafeCode = `// Simulated vulnerable indirect call (no CFI)
#[wasm_bindgen]
pub fn call_by_index(index: usize) -> i32 {
    let table: [fn() -> i32; 2] = [safe_function, secret_function];
    if index < table.len() {
        table[index]()
    } else {
        -1 // Invalid index
    }
}

#[wasm_bindgen]
pub fn safe_function() -> i32 { 42 }

#[wasm_bindgen]
pub fn secret_function() -> i32 { 1337 }
`;

const safeCode = `// CFI-enforced indirect call
#[wasm_bindgen]
pub fn call_by_index_cfi(index: usize) -> i32 {
    match index {
        0 => safe_function(),
        // Do not expose secret_function via table
        _ => -1,
    }
}

#[wasm_bindgen]
pub fn safe_function() -> i32 { 42 }

#[wasm_bindgen]
pub fn secret_function() -> i32 { 1337 }
`;

const IndirectCallLogicFlaw: React.FC = () => {
  const [selectedIndex, setSelectedIndex] = useState(0);
  const [result, setResult] = useState<number | null>(null);
  const [mode, setMode] = useState<'unsafe' | 'safe'>('unsafe');
  const [activeFunction, setActiveFunction] = useState<string | null>(null);
  const [callAnimation, setCallAnimation] = useState(false);

  const runDemo = () => {
    let value = -1;
    setCallAnimation(true);
    
    try {
      if (mode === 'unsafe') {
        if (selectedIndex === 0) {
          setActiveFunction('safe_function');
        } else if (selectedIndex === 1) {
          setActiveFunction('secret_function');
        }
        value = wasm.call_by_index(selectedIndex);
      } else {
        if (selectedIndex === 0) {
          setActiveFunction('safe_function');
        } else {
          // In safe mode, index 1 doesn't lead to secret_function
          setActiveFunction('none');
        }
        value = wasm.call_by_index_cfi(selectedIndex);
      }
    } catch (e) {
      value = -1;
    }
    
    setResult(value);
    
    // Reset animation after some time
    setTimeout(() => {
      setCallAnimation(false);
      setTimeout(() => setActiveFunction(null), 500);
    }, 1500);
  };

  return (
    <div className="exploit-container">
      <h3>Indirect Call Logic Flaw</h3>
      <div className="exploit-explanation">
        <p>
          <strong>WebAssembly Indirect Call Logic Vulnerabilities</strong>
        </p>
        <p>
          WebAssembly's CFI provides strong type-based protection for indirect calls through 
          function tables. However, CFI cannot protect against logic errors in the WASM code 
          itself - if sensitive functions are incorrectly included in callable tables or 
          dispatch logic, they become accessible through legitimate CFI-protected pathways.
        </p>
        <p>
          <strong>The Vulnerability:</strong> When WASM developers mistakenly include sensitive 
          functions in function tables or indirect call arrays, attackers can trigger these 
          functions through the module's intended interface. The CFI system sees these as 
          legitimate calls because they follow proper type checking and table access patterns.
        </p>
        <p>
          <strong>Real-world Impact:</strong> This can allow privilege escalation within WASM 
          modules, bypassing intended access controls, executing administrative functions, or 
          accessing sensitive data processing routines that should only be called internally.
        </p>
        <p>
          <strong>CFI Limitation:</strong> WASM's CFI validates that calls are type-safe and 
          go through proper tables, but it cannot enforce application-level access control 
          policies or prevent logic errors in table construction.
        </p>
      </div>
      
      <div className="exploit-controls">
        {/* Visual representation of the function table and call path */}
        <div className="function-table-visualization">
          <p className="implementation-label">Select an implementation to test:</p>
          <div className="control-row">
            <RunButton 
              type="unsafe"
              onClick={() => setMode('unsafe')}
              className={mode === 'unsafe' ? 'active' : ''}
            >
              {mode === 'unsafe' ? 'Using Unsafe Version' : 'Use Unsafe Version'}
            </RunButton>
            
            <RunButton 
              type="safe"
              onClick={() => setMode('safe')}
              className={mode === 'safe' ? 'active' : ''}
            >
              {mode === 'safe' ? 'Using Safe Version' : 'Use Safe Version'}
            </RunButton>
          </div>

          <h4>Function Table Structure</h4>
          <div className={`function-table-diagram ${callAnimation ? 'animating' : ''}`}>
            {/* Caller */}
            <div className="function-caller">
              <div className="function-element">
                <span className="function-label">Caller Code</span>
                <div className="function-code">
                  call_indirect(
                  <span className="function-param">{selectedIndex}</span>
                  )
                </div>
              </div>
              <div className={`function-arrow ${callAnimation ? 'animate-arrow' : ''}`}></div>
            </div>
            
            {/* Function table */}
            <div className="function-table">
              <div className="table-header">Function Table</div>
              <div className={`table-slot ${selectedIndex === 0 ? 'selected' : ''} ${activeFunction === 'safe_function' ? 'active-function' : ''}`}>
                <span className="slot-index">0</span>
                <span className="slot-function safe-function">safe_function</span>
                <span className="slot-return">→ 42</span>
              </div>
              {mode === 'unsafe' ? (
                <div className={`table-slot ${selectedIndex === 1 ? 'selected' : ''} ${activeFunction === 'secret_function' ? 'active-function' : ''}`}>
                  <span className="slot-index">1</span>
                  <span className="slot-function secret-function">secret_function</span>
                  <span className="slot-return">→ 1337</span>
                </div>
              ) : (
                <div className={`table-slot ${selectedIndex === 1 ? 'selected' : ''} ${activeFunction === 'none' ? 'active-function' : ''}`}>
                  <span className="slot-index">1</span>
                  <span className="slot-function blocked-function">Not accessible</span>
                  <span className="slot-return">→ -1</span>
                </div>
              )}
            </div>
          </div>
          
          <div className="function-table-controls">
            <div className="control-label">Select function index to call:</div>
            <div className="index-selector">
              <RunButton 
                type="secondary"
                onClick={() => setSelectedIndex(0)}
                className={`index-button ${selectedIndex === 0 ? 'active' : ''}`}
              >
                Index 0
              </RunButton>
              <RunButton 
                type="secondary"
                onClick={() => setSelectedIndex(1)}
                className={`index-button ${selectedIndex === 1 ? 'active' : ''}`}
              >
                Index 1
              </RunButton>
            </div>
            <RunButton 
              type="primary"
              onClick={runDemo}
              disabled={callAnimation}
              className="execute-button"
            >
              {callAnimation ? 'Calling...' : 'Execute Call Indirect'}
            </RunButton>
          </div>
        </div>
      </div>
      
      <OutputPanel title="Result">
        {result !== null ? (
          <div className="result-info">
            <div><strong>Table index called:</strong> {selectedIndex}</div>
            <div><strong>Return value:</strong> {result}</div>
            
            {mode === 'unsafe' && selectedIndex === 1 && result === 1337 && (
              <SecurityMessage type="warning" title="Logic Vulnerability Exploited">
                <strong>CFI Bypass Success:</strong> The secret function was accessed through 
                legitimate CFI-protected indirect call mechanisms!
                <br/><br/>
                <strong>Root Cause:</strong> The WASM code incorrectly included the sensitive 
                function in the callable table, making it accessible through index 1.
                <br/><br/>
                <strong>Impact:</strong> Attackers can now access privileged functionality 
                through the module's intended interface, bypassing application-level access controls.
              </SecurityMessage>
            )}
            
            {mode === 'safe' && selectedIndex === 1 && result === -1 && (
              <SecurityMessage type="success" title="Secure Implementation">
                <strong>CFI Protection Effective:</strong> The secure implementation prevents 
                access to sensitive functions through explicit access control.
                <br/><br/>
                <strong>Security Design:</strong> Using match statements instead of arrays 
                ensures only intended functions are callable, preventing logic-based CFI bypasses.
                <br/><br/>
                <strong>Result:</strong> Index 1 returns -1 (error) instead of executing 
                the secret function, maintaining proper security boundaries.
              </SecurityMessage>
            )}
            
            {mode === 'unsafe' && selectedIndex === 0 && result === 42 && (
              <SecurityMessage type="info" title="Safe Function Called">
                Index 0 correctly calls the safe function. This demonstrates that the 
                vulnerability is specific to accessing unintended functions through indirect calls.
              </SecurityMessage>
            )}
          </div>
        ) : (
          <ResultDisplay type="neutral" result="No call made yet." />
        )}
      </OutputPanel>
      
      <CodeViewer unsafeCode={unsafeCode} safeCode={safeCode} title="Pure WASM CFI Bypass Implementation" />
      <WasmErrorDisplay />
    </div>
  );
};

export default IndirectCallLogicFlaw;