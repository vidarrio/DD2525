import React, { useState } from 'react';
import CFIBypass from './Subexploits/CFIBypass';
import IndirectCallLogicFlaw from './Subexploits/CFIPureWasm';
import CFITableExportBypass from './Subexploits/CFITableExportBypass';
import '../../../styles/control-flow/tabs.css';

const ControlFlow: React.FC = () => {
  const [activeTab, setActiveTab] = useState<string>('host exposure');

  return (
    <div id="control-flow" className="page active">
      <h2>Control Flow Attacks</h2>
      <p className="section-intro">
        Control-flow integrity (CFI) in WebAssembly is designed to protect against unintended changes in program execution, especially for <b>direct calls</b>, <b>indirect calls</b> (via tables), and <b>returns</b>. Direct and indirect calls are called "forward-edge" transitions, while returns are "back-edge" transitions. WebAssembly enforces CFI for these edges using type checks, explicit function indexes, and a protected call stack.<br/><br/>
        <b>However, CFI in WASM has boundaries:</b> It cannot protect against mistakes in what the module exports, logic bugs in table setup, or host-side tampering if the function table is exported. The demos below illustrate these boundaries:
        <ul>
          <li><b>Host/WASM Export Exposure:</b> Shows that if a sensitive function is exported, any JS code can call it directlyâ€”CFI cannot help.</li>
          <li><b>Indirect Call Logic Flaw:</b> Shows that a logic bug in WASM can allow indirect calls to sensitive functions, even with CFI in place.</li>
          <li><b>Exported Table Modification:</b> Shows that if the function table is exported, the host can subvert CFI for indirect calls by rewriting the table.</li>
        </ul>
        These examples map to the official CFI concepts: direct calls (export exposure), indirect calls (table logic/host tampering), and the limits of WASM's runtime protections.
      </p>
      <div className="tabs control-flow-tabs">
        <button
          className={`tab-btn ${activeTab === 'host exposure' ? 'active' : ''}`}
          onClick={() => setActiveTab('host exposure')}
        >
          Host Exposure
        </button>
        <button
          className={`tab-btn ${activeTab === 'indirect call logic flaw' ? 'active' : ''}`}
          onClick={() => setActiveTab('indirect call logic flaw')}
        >
          Indirect Call Logic Flaw
        </button>
        <button
          className={`tab-btn ${activeTab === 'exported table modification' ? 'active' : ''}`}
          onClick={() => setActiveTab('exported table modification')}
        >
          Exported Table Modification
        </button>
      </div>
      <div className="control-flow-content">
        {activeTab === 'host exposure' && <CFIBypass />}
        {activeTab === 'indirect call logic flaw' && <IndirectCallLogicFlaw />}
        {activeTab === 'exported table modification' && <CFITableExportBypass />}
      </div>
    </div>
  );
};

export default ControlFlow;
