(* Starting file for the server *)

import lists
import declassifyutil
let 
    (* Helper functions *)
    fun storeProfile (profiles, profile, agent, pid) =
        let
            val _ = printString "Storing profile"
        in
            (profile, agent, pid) :: profiles
        end

    fun sendMatchNotification (recipientPID, profileView, recipientSecLev) =
        (* We use let pini authority to clear the block level classification after the in *)
        let pini authority
            val _ = print "Sending match notification"
        in
            send (recipientPID, ("NEWMATCH", profileView))
        end

    fun findMatches (profiles, newProfile, newAgent, newPID) =
        let
            (* Extract profile components *)
            val (newSecLev, newName, newYearOfBirth, newIsFemale, newInterests) = newProfile

            (* Create authority for this profile *)
            val profileAuthority = attenuate(authority, newSecLev)

            (* Find matches *)
            fun checkMatches [] = ()
              | checkMatches ((profile, agent, pid)::rest) = 
                let
                    (* Extract existing profile components *)
                    val (secLev, name, yearOfBirth, isFemale, interests) = profile

                    val _ = printWithLabels ("newagent:", newAgent(profile))
                    val _ = printWithLabels ("agent:", agent(newProfile))

                    (* Create authority for this profile *)
                    val matchAuthority = attenuate(authority, secLev)

                    (* Check if the profiles match *)
                    val (newProfileAcceptsMatch, newProfileView) = newAgent(profile)
                    val (matchAcceptsNewProfile, matchProfileView) = agent(newProfile)

                    (* Declassify the booleans of the match, avoiding pc dependencies *)
                    val declassifiedNewProfileAcceptsMatch = declassify_with_block(newProfileAcceptsMatch, authority, `{}`)
                    val declassifiedMatchAcceptsNewProfile = declassify_with_block(matchAcceptsNewProfile, authority, `{}`)

                in
                    (* If both profiles accept the match, send the match *)
                    if declassifiedNewProfileAcceptsMatch andalso declassifiedMatchAcceptsNewProfile 
                    then
                        let
                            (* Send the match *)
                            val _ = print ("Match found between " ^ newName ^ " and " ^ name)
                            val _ = sendMatchNotification (pid, newProfileView, secLev)
                            val _ = sendMatchNotification (newPID, matchProfileView, newSecLev)
                        in
                            checkMatches rest
                        end
                    else
                        checkMatches rest
                end

        in
            checkMatches profiles
        end
                    

    (* Main server loop *)
    fun server (profiles) =
        let 
            val _ = receive [
                hn ("NEWPROFILE", (profile, agent, pid)) => 
                    let
                        val newProfiles = storeProfile(profiles, profile, agent, pid)

                        (* Find and send matches *)
                        val _ = findMatches (profiles, profile, agent, pid)
                    in
                        server (newProfiles)
                    end

                (* Other handlers can go here *)
            ]
        in
            (* This should never be reached, because our receive is blocking *)
            server (profiles)
        end

    (* Main function *)
    fun main () =       
        let 
            val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            val serverProcess = spawn (fn () => server ([]))
            val _ =  register ("datingServer", serverProcess, authority)
        in  

            (* Use this line to call the dispatch server *)
            (*send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode));*)
            ()
        end
in 
    main ()
end
