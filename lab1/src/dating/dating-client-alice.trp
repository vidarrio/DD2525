(* Placeholder for the dating-client. Note that in order to communicate 
   with your server you will need to create the corresponding trustmap *)
   
import lists
let 
   fun client () =
      let val _ = receive [hn ("NEWMATCH", profileView)
            => print ("New match received", profileView)
         ]
      in 
         client ()
      end

   fun sameYearAgent matchProfile =
      let 
         val securityLevel = `{alice}`
         val name = "Alice" 
         val yearOfBirth = 1999 
         val isFemale = true
         val interests = ["Hiking", "Biking"]

         val (matchSecLev, _, matchYearOfBirth, _, _) = matchProfile

      in
         if matchYearOfBirth = yearOfBirth
         then
            (
               true, 
               (
                  name raisedTo matchSecLev, 
                  yearOfBirth raisedTo matchSecLev, 
                  isFemale raisedTo matchSecLev, 
                  interests raisedTo matchSecLev
               )
            )
         else
            (false, ())
      end

   fun main () =       
      let 
         val pid = spawn client
         val _ = print ("Running node with identifier: ", pid)
         val _ =  register ("datingClientAlice", pid, authority)

         val securityLevel = `{alice}`
         val name = "Alice" raisedTo `{alice}`
         val yearOfBirth = 1999 raisedTo `{alice}`
         val isFemale = true raisedTo `{alice}`
         val interests = ["Hiking", "Biking"] raisedTo `{alice}`
         
         val profile = (securityLevel, name, yearOfBirth, isFemale, interests)
         
         val datingServer = whereis ("@datingServer", "datingServer")
         val data = ("NEWPROFILE", (profile, sameYearAgent, pid))
         val _ = printWithLabels ("data: ", data)
      in
         send (datingServer, data)
      end
in 
   main ()
end